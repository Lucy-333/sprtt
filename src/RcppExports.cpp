// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// test
int test(int a, int b);
RcppExport SEXP _sprt_test(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(test(a, b));
    return rcpp_result_gen;
END_RCPP
}
// dnf_cpp
long double dnf_cpp(double x, double df1, double df2, double ncp, bool log);
RcppExport SEXP _sprt_dnf_cpp(SEXP xSEXP, SEXP df1SEXP, SEXP df2SEXP, SEXP ncpSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type df1(df1SEXP);
    Rcpp::traits::input_parameter< double >::type df2(df2SEXP);
    Rcpp::traits::input_parameter< double >::type ncp(ncpSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dnf_cpp(x, df1, df2, ncp, log));
    return rcpp_result_gen;
END_RCPP
}
// dnt_cpp
long double dnt_cpp(double x, double df, double ncp, bool log);
RcppExport SEXP _sprt_dnt_cpp(SEXP xSEXP, SEXP dfSEXP, SEXP ncpSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< double >::type ncp(ncpSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dnt_cpp(x, df, ncp, log));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sprt_test", (DL_FUNC) &_sprt_test, 2},
    {"_sprt_dnf_cpp", (DL_FUNC) &_sprt_dnf_cpp, 5},
    {"_sprt_dnt_cpp", (DL_FUNC) &_sprt_dnt_cpp, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_sprt(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
